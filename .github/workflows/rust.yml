name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Run clippy
      run: cargo clippy -- -D warnings

  build:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Install cross-compilation tools
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: latest-sender-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/latest-sender${{ matrix.target == 'x86_64-pc-windows-gnu' && '.exe' || '' }}

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/github
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    - name: Prepare release binaries
      run: |
        mkdir -p target/release
        mkdir -p target/x86_64-pc-windows-gnu/release
        mkdir -p target/x86_64-apple-darwin/release
        cp artifacts/latest-sender-x86_64-unknown-linux-gnu/latest-sender target/release/
        cp artifacts/latest-sender-x86_64-pc-windows-gnu/latest-sender.exe target/x86_64-pc-windows-gnu/release/
        cp artifacts/latest-sender-x86_64-apple-darwin/latest-sender target/x86_64-apple-darwin/release/
        chmod +x target/release/latest-sender
        chmod +x target/x86_64-apple-darwin/release/latest-sender
    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release --debug
